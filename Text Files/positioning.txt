The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky).

The position Property
The position property specifies the type of positioning method used for an element.

There are five different position values:

static
relative
fixed
absolute
sticky

Elements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value.

******************************************************
******************************************************
 
position: static;

HTML elements are positioned static by default.

Static positioned elements are not affected by the top, bottom, left, and right properties.

An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page.


******************************************************
******************************************************

position: relative;

An element with position: relative; is positioned relative to its normal position.

Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. 
Other content will not be adjusted to fit into any gap left by the element.

new element sets its posiotion

left right top bottom according to its normal position

left: 10px means there is 10px gap of new element at its left (relative to its normal position)
top: 10px  means there is 10px gap of new element at its top from the old
bottom: 50px;  means there is 50px gap of new element at its bottom from the old (means the new position is above the normal position)

******************************************************
******************************************************

position: fixed;


An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.

A fixed element does not leave a gap in the page where it would normally have been located.


******************************************************
******************************************************

position: absolute;

An element with position: absolute; is positioned relative to its first parent

However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.

Note: A "positioned" element is one whose position is anything except static.

******************************************************
******************************************************

position: sticky;


An element with position: sticky; is positioned based on the user's scroll position.

A sticky element toggles between relative and fixed, depending on the scroll position. 
It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).

******************************************************
******************************************************
 

Display property  https://www.w3schools.com/cssref/pr_class_display.asp
 
inline	  	Displays an element as an inline element (like <span>). Any height and width properties will have no effect	
block		Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width	
contents	Makes the container disappear, making the child elements children of the element the next level up in the DOM	
flex		Displays an element as a block-level flex container	
grid		Displays an element as a block-level grid container	
inline-block	Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values	
inline-flex	Displays an element as an inline-level flex container	
inline-grid	Displays an element as an inline-level grid container	
inline-table	The element is displayed as an inline-level table	
list-item	Let the element behave like a <li> element	
run-in	    	 	Displays an element as either block or inline, depending on context	
table			Let the element behave like a <table> element	
table-caption		Let the element behave like a <caption> element	
table-column-group	Let the element behave like a <colgroup> element	
table-header-group	Let the element behave like a <thead> element	
table-footer-group	Let the element behave like a <tfoot> element	
table-row-group		Let the element behave like a <tbody> element	
table-cell		Let the element behave like a <td> element	
table-column		Let the element behave like a <col> element	
table-row		Let the element behave like a <tr> element	
none			The element is completely removed	
initial			Sets this property to its default value. Read about initial	
inherit			Inherits this property from its parent element. Read about inherit



******************************************************
******************************************************
















